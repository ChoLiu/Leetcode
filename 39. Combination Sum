Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        ans = []
        temp = []
        candidates.sort()
        self.dfs(candidates, ans, temp, target, 0)
        
        return ans
        
    def dfs(self, candidates, ans, temp, target, index):
        
        if target == 0:
            ans.append(temp.copy())
            return
            
        for i in range(index,len(candidates)):
            if candidates[i] > target:
                break
            temp.append(candidates[i])
            self.dfs(candidates, ans, temp, target - candidates[i], i)
            temp.pop()

### Slow casue did not break for impossible cases###
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        ans = []
        temp = []
        self.dfs(candidates, ans, temp, target)
        
        return ans
        
    def dfs(self, candidates, ans, temp, target):
        temp.sort()
        if target == 0 and temp not in ans:
            ans.append(temp)
            
        for i in range(len(candidates)):
            if target < candidates[i]:
                continue
            self.dfs(candidates, ans, temp + [candidates[i]], target - candidates[i] )
