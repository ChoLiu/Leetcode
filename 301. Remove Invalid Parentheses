Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Example:

Input: "()())()"
Output: ["()()()", "(())()"]

class Solution:
    def removeInvalidParentheses(self, s: str) -> List[str]:
    #Check invalid # of parentheses
        l, r = 0, 0
        for c in s:
            if c == '(':
                l += 1
            if l == 0:
                if c == ')':
                    r += 1
            else:
                if c == ')':
                    l -= 1
        ans = []
        self.dfs(0, l, r, ans, s)
        return ans
    # check if the string is valid
    def isvalid(self, string):
        count = 0
        for c in string:
            if c == '(':
                count += 1
            if c == ')':
                count -=1
            if count < 0:
                return False
        return count == 0
    
    def dfs(self, index, left, right, ans, s):
 
        if left == 0 and right == 0:
            if self.isvalid(s):
                ans.append(s)
            return ans
        
        for i in range(index, len(s)):
            #avoid repeate result
            if i != index and s[i] == s[i-1]:
                continue
                
            if s[i] == '(' or s[i] == ')':
                temp = s
                temp = s[:i] + s[i+1:]
                
                if right > 0 and s[i] == ')':
                    self.dfs(i, left, right - 1, ans, temp)
                elif left >0 and s[i] == '(':
                    self.dfs(i,left - 1, right, ans, temp)
