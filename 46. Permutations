Given a collection of distinct integers, return all possible permutations.

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        temp = []
        ans = []
        self.dfs(nums, temp, ans)
        return ans
     
        
    def dfs(self, nums, temp, ans):
           
            if len(temp) == len(nums):
                ans.append(temp)
                return ans
            
            for i in range(len(nums)):
                if nums[i] not in temp:
                    temp.append(nums[i])
                    self.dfs(nums, temp, ans)
                    
Backtracking
                
