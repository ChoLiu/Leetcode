Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

```python
class Solution:
    def isValid(self, s: str) -> bool:
        
        check = {'(':')','{':'}','[':']'}
        stack = []
        
        for item in s:
            if item in ['(','{','[']:
                stack.append(check[item])
                
            elif not stack or item != stack.pop():
                return False
            
        return stack == []
```
 1. By using stack to store the paired parentheses and check if the stack is empty or if the left parentheses are matched.
 
 ```python
class Solution(object):
    def recoverFromPreorder(self, S):
        """
        :type S: str
        :rtype: TreeNode
        """
        def build_tree(nodes, depths):
            if len(nodes) == 0:
                return None
            if len(nodes) == 1:
                return TreeNode(nodes[0])
            root = TreeNode(nodes[0])
            sub_depth = depths[1]
            # if only left child
            if depths.count(sub_depth) == 1:
                root.left = build_tree(nodes[1:], depths[1:])
            else:
                right_idx = depths[2:].index(sub_depth) + 2
                root.left = build_tree(nodes[1:right_idx], depths[1:right_idx])
                root.right = build_tree(nodes[right_idx:], depths[right_idx:])
            return root
            
        pre_dash_count = 0
        cur_num = 0
        idx = 0
        length = len(S)
        nodes = []
        depths = []
        
        while idx < len(S):
            if S[idx].isdigit():
                while idx < length and S[idx].isdigit():
                    cur_num = cur_num*10 + int(S[idx])
                    idx += 1
                nodes.append(cur_num)
                depths.append(pre_dash_count)
                cur_num = 0
                pre_dash_count = 0
            else:
                while idx < length and S[idx]=='-':
                    pre_dash_count += 1
                    idx += 1
        print(nodes)    # [1, 2, 3, 4, 5, 6, 7]
        print(depths)   # [0, 1, 2, 2, 1, 2, 2]
        
        return build_tree(nodes, depths)
```
 
