The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.

Input: n = 3, k = 3
Output: "213"

### special case ###

class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        ans = ''
        fact = [1] * n
        num = [str(i) for i in range(1, 10)]
        for i in range(1, n):
            fact[i] = fact[i - 1] * i
        k -= 1
        for i in range(n, 0, -1):
            first = k // fact[i - 1]
            k %= fact[i - 1]
            ans += num[first]
            num.pop(first)
        return ans
        
### TLE ###
class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        
        # nums = []
        # for i in range(1, n+1):
        #     nums.append(i)
        
        temp = ''
        ans = []
        visited = set()
        self.dfs(n,k, temp, ans, visited)
       
        return ans[k-1]
        
        
    def dfs(self, n, k, temp, ans, visited):
        if len(ans) == k:
            return
        
        if len(temp) == n:
            ans.append(temp)
            return ans
            
        for i in range(1, n + 1):
            if i in visited:
                continue
                
            visited.add(i)
            self.dfs(n, k, temp + str(i), ans, visited)
            visited.remove(i)
